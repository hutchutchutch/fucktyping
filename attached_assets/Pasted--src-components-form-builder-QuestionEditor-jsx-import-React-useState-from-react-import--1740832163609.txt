
// src/components/form-builder/QuestionEditor.jsx
import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { X, Plus, Trash, Shuffle } from "lucide-react";
import { toast } from "sonner";

// Mock current question for editing
const mockQuestion = {
  id: "q2",
  title: "Which features do you use most frequently?",
  description: "Select all that apply",
  type: "multiple_choice",
  required: true,
  options: ["User Interface", "Reporting", "Data Analysis", "Integration"],
  validation: {
    min: 1,
    max: 3,
  },
};

const QuestionEditor = () => {
  const [question, setQuestion] = useState(mockQuestion);
  
  const handleQuestionChange = (key, value) => {
    setQuestion({
      ...question,
      [key]: value,
    });
  };
  
  const handleOptionChange = (index, value) => {
    const updatedOptions = [...question.options];
    updatedOptions[index] = value;
    setQuestion({
      ...question,
      options: updatedOptions,
    });
  };
  
  const addOption = () => {
    setQuestion({
      ...question,
      options: [...question.options, `Option ${question.options.length + 1}`],
    });
  };
  
  const removeOption = (index) => {
    const updatedOptions = [...question.options];
    updatedOptions.splice(index, 1);
    setQuestion({
      ...question,
      options: updatedOptions,
    });
  };
  
  const shuffleOptions = () => {
    const shuffled = [...question.options].sort(() => Math.random() - 0.5);
    setQuestion({
      ...question,
      options: shuffled,
    });
    toast.success("Options have been shuffled");
  };
  
  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle className="text-lg">Edit Question</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="question-title">Question</Label>
          <Input
            id="question-title"
            value={question.title}
            onChange={(e) => handleQuestionChange("title", e.target.value)}
            placeholder="Enter your question"
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="question-description">Description (Optional)</Label>
          <Textarea
            id="question-description"
            value={question.description || ""}
            onChange={(e) => handleQuestionChange("description", e.target.value)}
            placeholder="Add a description or instructions"
            rows={2}
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="question-type">Question Type</Label>
          <Select
            value={question.type}
            onValueChange={(value) => handleQuestionChange("type", value)}
          >
            <SelectTrigger id="question-type">
              <SelectValue placeholder="Select question type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="text">Text</SelectItem>
              <SelectItem value="multiple_choice">Multiple Choice</SelectItem>
              <SelectItem value="dropdown">Dropdown</SelectItem>
              <SelectItem value="yes_no">Yes/No</SelectItem>
              <SelectItem value="rating">Rating</SelectItem>
              <SelectItem value="date">Date</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div className="flex items-center space-x-2">
          <Switch
            id="question-required"
            checked={question.required}
            onCheckedChange={(checked) => handleQuestionChange("required", checked)}
          />
          <Label htmlFor="question-required">Required question</Label>
        </div>
        
        {(question.type === "multiple_choice" || question.type === "dropdown") && (
          <div className="space-y-3">
            <Separator />
            
            <div className="flex items-center justify-between">
              <Label>Answer Options</Label>
              <div className="space-x-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={shuffleOptions}
                  className="h-8"
                >
                  <Shuffle size={14} className="mr-1" />
                  Shuffle
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={addOption}
                  className="h-8"
                >
                  <Plus size={14} className="mr-1" />
                  Add Option
                </Button>
              </div>
            </div>
            
            <div className="space-y-2">
              {question.options.map((option, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <Input
                    value={option}
                    onChange={(e) => handleOptionChange(index, e.target.value)}
                    placeholder={`Option ${index + 1}`}
                  />
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => removeOption(index)}
                    disabled={question.options.length <= 1}
                    className="h-10 w-10 shrink-0"
                  >
                    <Trash size={16} />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {question.type === "rating" && (
          <div className="space-y-4">
            <Separator />
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="min-rating">Min Rating</Label>
                <Select
                  value={question.validation?.min?.toString() || "1"}
                  onValueChange={(value) => 
                    handleQuestionChange("validation", {
                      ...question.validation,
                      min: parseInt(value),
                    })
                  }
                >
                  <SelectTrigger id="min-rating">
                    <SelectValue placeholder="Min" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="0">0</SelectItem>
                    <SelectItem value="1">1</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="max-rating">Max Rating</Label>
                <Select
                  value={question.validation?.max?.toString() || "5"}
                  onValueChange={(value) => 
                    handleQuestionChange("validation", {
                      ...question.validation,
                      max: parseInt(value),
                    })
                  }
                >
                  <SelectTrigger id="max-rating">
                    <SelectValue placeholder="Max" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="3">3</SelectItem>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        )}
      </CardContent>
      
      <CardFooter className="border-t p-4 flex justify-end space-x-2">
        <Button variant="outline">Cancel</Button>
        <Button>Save Changes</Button>
      </CardFooter>
    </Card>
  );
};

export default QuestionEditor;