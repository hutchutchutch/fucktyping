generate the following application with placeholder text with the path location of each file commented out as the content of every single page mentioned in the attached file structure

File Structure for Voice Form Agent Application
Here's a comprehensive file structure for your hackathon project using Vite, Express, LangGraph.js, Groq, and Clerk for authentication. This structure optimizes for quick development while maintaining good separation of concerns:

<file structure>
voice-form-agent/
│
├── client/                           # Frontend Vite app
│   ├── public/
│   │   ├── favicon.ico
│   │   └── robots.txt
│   │
│   ├── src/
│   │   ├── assets/                   # Static assets
│   │   │   ├── icons/
│   │   │   └── images/
│   │   │
│   │   ├── components/               # Reusable components
│   │   │   ├── common/
│   │   │   │   ├── Button.jsx
│   │   │   │   ├── Card.jsx
│   │   │   │   ├── Modal.jsx
│   │   │   │   └── Notification.jsx
│   │   │   │
│   │   │   ├── form-builder/
│   │   │   │   ├── FormBuilder.jsx
│   │   │   │   ├── QuestionEditor.jsx
│   │   │   │   ├── ResponseOptions.jsx
│   │   │   │   └── EmailTemplateEditor.jsx
│   │   │   │
│   │   │   ├── form-responder/
│   │   │   │   ├── VoiceInterface.jsx
│   │   │   │   ├── Transcript.jsx
│   │   │   │   └── AudioVisualizer.jsx
│   │   │   │
│   │   │   └── dashboard/
│   │   │       ├── FormsList.jsx
│   │   │       ├── Analytics.jsx
│   │   │       └── ResponseViewer.jsx
│   │   │
│   │   ├── context/                  # React context
│   │   │   ├── AuthContext.jsx
│   │   │   └── FormContext.jsx
│   │   │
│   │   ├── hooks/                    # Custom hooks
│   │   │   ├── useAudio.js
│   │   │   ├── useForm.js
│   │   │   └── useResponses.js
│   │   │
│   │   ├── pages/                    # Page components
│   │   │   ├── LandingPage.jsx
│   │   │   ├── FormBuilder.jsx
│   │   │   ├── FormResponder.jsx
│   │   │   ├── Dashboard.jsx
│   │   │   ├── Login.jsx
│   │   │   └── NotFound.jsx
│   │   │
│   │   ├── services/                 # API service calls
│   │   │   ├── api.js                # API client setup
│   │   │   ├── formService.js        # Form CRUD operations
│   │   │   ├── voiceService.js       # Voice processing functions
│   │   │   └── conversationService.js # Conversation management
│   │   │
│   │   ├── utils/                    # Utility functions
│   │   │   ├── formatters.js
│   │   │   ├── validators.js
│   │   │   └── audio.js
│   │   │
│   │   ├── App.jsx                   # Main component
│   │   ├── main.jsx                  # Entry point
│   │   └── routes.jsx                # Route definitions
│   │
│   ├── .env.example                  # Example environment variables
│   ├── index.html
│   ├── package.json
│   ├── vite.config.js
│   └── tailwind.config.js            # If using Tailwind
│
├── server/                           # Backend Express app
│   ├── src/
│   │   ├── config/
│   │   │   ├── database.js           # Supabase client setup
│   │   │   ├── environment.js        # Environment config
│   │   │   └── middlewares.js        # Express middleware setup
│   │   │
│   │   ├── controllers/
│   │   │   ├── formController.js
│   │   │   ├── conversationController.js
│   │   │   ├── responseController.js
│   │   │   └── emailController.js
│   │   │
│   │   ├── engine/                   # Voice agent engine
│   │   │   ├── graphBuilder.js       # Dynamic graph generation
│   │   │   ├── nodes/                # LangGraph nodes
│   │   │   │   ├── openActivity.js
│   │   │   │   ├── questioner.js
│   │   │   │   ├── validator.js
│   │   │   │   ├── rephrase.js
│   │   │   │   ├── closeActivity.js
│   │   │   │   └── followUp.js
│   │   │   │
│   │   │   ├── conditionals/         # Conditional functions
│   │   │   │   ├── shouldRephrase.js
│   │   │   │   ├── shouldContinue.js
│   │   │   │   └── needsFollowUp.js
│   │   │   │
│   │   │   └── stateSchema.js        # LangGraph state schema
│   │   │
│   │   ├── models/                   # Data models
│   │   │   ├── form.js
│   │   │   ├── question.js
│   │   │   ├── conversation.js
│   │   │   ├── response.js
│   │   │   └── message.js
│   │   │
│   │   ├── routes/
│   │   │   ├── authRoutes.js         # Clerk auth routes
│   │   │   ├── formRoutes.js
│   │   │   ├── conversationRoutes.js
│   │   │   └── webhookRoutes.js      # For 3rd party service webhooks
│   │   │
│   │   ├── services/
│   │   │   ├── groqService.js        # Groq API integration
│   │   │   ├── emailService.js       # SendGrid integration
│   │   │   ├── voiceService.js       # STT/TTS integrations
│   │   │   └── storageService.js     # File storage service
│   │   │
│   │   ├── utils/
│   │   │   ├── errorHandler.js
│   │   │   ├── logger.js
│   │   │   ├── tokenGenerator.js
│   │   │   └── validators.js
│   │   │
│   │   ├── middleware/
│   │   │   ├── auth.js               # Clerk auth middleware
│   │   │   ├── errorMiddleware.js
│   │   │   └── rateLimiter.js
│   │   │
│   │   └── app.js                    # Express app setup
│   │
│   ├── .env.example
│   ├── package.json
│   └── server.js                     # Entry point
│
├── shared/                           # Shared between client and server
│   ├── constants.js
│   ├── validationSchemas.js
│   └── types.js                      # TypeScript types
│
├── scripts/                          # Deployment scripts
│   ├── deploy.sh                     # AWS deployment script
│   └── seed-db.js                    # Seed database with initial data
│
├── .github/                          # CI/CD workflows
│   └── workflows/
│       └── deploy.yml                # GitHub Actions workflow
│
├── .gitignore
├── README.md
├── package.json                      # Root package.json for scripts
└── docker-compose.yml                # For local development
<file structure />