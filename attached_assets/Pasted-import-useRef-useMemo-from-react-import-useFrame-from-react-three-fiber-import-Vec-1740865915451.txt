import { useRef, useMemo } from 'react';
import { useFrame } from '@react-three/fiber';
import { Vector3, BufferGeometry, BufferAttribute, ShaderMaterial, Points } from 'three';

const CHARACTERS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

// Vertex Shader
const vertexShader = `
  attribute float size;
  attribute vec3 customColor;
  attribute float opacity;
  varying vec3 vColor;
  varying float vOpacity;

  void main() {
    vColor = customColor;
    vOpacity = opacity;
    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
    gl_PointSize = size * (300.0 / -mvPosition.z);
    gl_Position = projectionMatrix * mvPosition;
  }
`;

// Fragment Shader
const fragmentShader = `
  varying vec3 vColor;
  varying float vOpacity;

  void main() {
    float strength = distance(gl_PointCoord, vec2(0.5));
    strength = 1.0 - strength;
    strength = pow(strength, 2.0);

    vec3 color = vColor;
    float alpha = vOpacity * strength;

    gl_FragColor = vec4(color, alpha);
  }
`;

const PARTICLE_COUNT = 2000;
const COLUMN_COUNT = 50;
const FALL_SPEED = 0.08;

export default function MatrixRain() {
  const points = useRef<Points>(null);

  // Create particles
  const [positions, colors, sizes, opacities] = useMemo(() => {
    const positions = new Float32Array(PARTICLE_COUNT * 3);
    const colors = new Float32Array(PARTICLE_COUNT * 3);
    const sizes = new Float32Array(PARTICLE_COUNT);
    const opacities = new Float32Array(PARTICLE_COUNT);

    // Calculate column width
    const columnWidth = 30 / COLUMN_COUNT;

    for (let i = 0; i < PARTICLE_COUNT; i++) {
      // Assign to columns
      const columnIndex = i % COLUMN_COUNT;
      const x = (columnIndex - COLUMN_COUNT / 2) * columnWidth;

      // Random starting positions
      positions[i * 3] = x;
      positions[i * 3 + 1] = Math.random() * 20;  // y
      positions[i * 3 + 2] = 0;  // z

      // Bright green color with slight variations
      const brightness = 0.7 + Math.random() * 0.3;
      colors[i * 3] = 0;  // R
      colors[i * 3 + 1] = brightness;  // G
      colors[i * 3 + 2] = 0;  // B

      // Larger sizes for better visibility
      sizes[i] = 2.5;

      // Start with random opacity
      opacities[i] = Math.random();
    }

    return [positions, colors, sizes, opacities];
  }, []);

  // Create geometry
  const geometry = useMemo(() => {
    const geometry = new BufferGeometry();
    geometry.setAttribute('position', new BufferAttribute(positions, 3));
    geometry.setAttribute('customColor', new BufferAttribute(colors, 3));
    geometry.setAttribute('size', new BufferAttribute(sizes, 1));
    geometry.setAttribute('opacity', new BufferAttribute(opacities, 1));
    return geometry;
  }, [positions, colors, sizes, opacities]);

  // Create material
  const material = useMemo(() => {
    return new ShaderMaterial({
      uniforms: {},
      vertexShader,
      fragmentShader,
      transparent: true,
      depthWrite: false,
      blending: 2,
    });
  }, []);

  // Animation
  useFrame((state) => {
    if (!points.current) return;

    const positions = points.current.geometry.attributes.position.array as Float32Array;
    const opacities = points.current.geometry.attributes.opacity.array as Float32Array;
    const sizes = points.current.geometry.attributes.size.array as Float32Array;

    for (let i = 0; i < PARTICLE_COUNT; i++) {
      // Fall effect
      positions[i * 3 + 1] -= FALL_SPEED * (0.5 + Math.random() * 0.5);

      // Reset position when particle goes below screen
      if (positions[i * 3 + 1] < -10) {
        // Reset to top with slight randomization
        positions[i * 3 + 1] = 10 + Math.random() * 2;
        opacities[i] = 0; // Start invisible
        sizes[i] = 2.5;
      }

      // Fade in effect at the top
      if (positions[i * 3 + 1] > 8 && opacities[i] < 1) {
        opacities[i] += 0.05;
      }

      // Fade out effect at the bottom
      if (positions[i * 3 + 1] < -8) {
        opacities[i] -= 0.05;
        sizes[i] *= 0.95;
      }
    }

    points.current.geometry.attributes.position.needsUpdate = true;
    points.current.geometry.attributes.opacity.needsUpdate = true;
    points.current.geometry.attributes.size.needsUpdate = true;
  });

  return (
    <points ref={points} geometry={geometry} material={material} />
  );
}